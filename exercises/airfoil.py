import math
import numpy
from matplotlib import pyplot

import os


def get_source_velocity(strength, xs, ys, X, Y):
    """
    Returns the velocity field generated by a source/sink

    Parameters:
        strength: float
            Strength of the source/sinl
        xs: float
            x-coordinate of the source or sink
        ys: float
            y-coordinate of the source or sink
        X: 2D Numpy array of floats
            x-coordinate of the mesh points
        Y: 2D Numpy array of floats
            y-coordinate of the mesh points

    Returns:
        u: 2D Numpy array of floats
            x-component of the velocity vector field
        v: 2D Numpy array of floats
            y-component of the velocity vector field
    """

    u = strength / (2 * math.pi) * (X - xs) / ((X - xs)**2 + (Y - ys)**2)
    v = strength / (2 * math.pi) * (Y - ys) / ((X - xs)**2 + (Y - ys)**2)

    return u, v


def get_freestream_velocity(u_inf, angle_of_attack):
    """
    Returns the velocity field due to the freestream

    Parameters:
        u_inf: float
            Absolute freestrean velocity
        angle_of_attack: float
            Angle of attack in rad

    Returns:
        u: float
            x-component of the velocity vector field
        v: float
            y-component of the velocity vector field
    """

    u = u_inf * numpy.cos(angle_of_attack)
    v = u_inf * numpy.sin(angle_of_attack)

    return u, v


def get_source_stream_function(strength, xs, ys, X, Y):
    """
    Returns the stream-function due to a source/sink

    Parameters:
        strength: float
            Strength of the source/sink
        xs: float
            x-coordinate of the source or sink
        ys: float
            y-coordinate of the source or sink
        X: 2D Numpy array of floats
            x-coordinate of the mesh points
        Y: 2D Numpy array of floats
            y-coordinate of the mesh points

    Returns:
        psi: 2D Numpy array of floats
            The strem-function
    """

    psi = strength / (2 * math.pi) * numpy.arctan2((Y - ys), (X - xs))

    return psi


def get_freestream_stream_function(u_inf, X, Y, angle_of_attack):
    """
    Returns the stream-function due to a freestream

    Parameters:
        u_inf: float
            Absolute freestrean velocity
        angle_of_attack: float
            Angle of attack in rad
        X: 2D Numpy array of floats
            x-coordinate of the mesh points
        Y: 2D Numpy array of floats
            y-coordinate of the mesh points

    Returns:
        psi: 2D Numpy array of floats
            The strem-function
    """

    psi = u_inf * (Y * numpy.cos(angle_of_attack) -
                   X * numpy.sin(angle_of_attack))

    return psi


"""MESH DEFINITION"""
N = 51  # Number of points in each direction
x_start, x_end = -1, 2  # Boundaries in x-direction
y_start, y_end = -0.5, 0.5  # Boundaries in y-direction
x = numpy.linspace(x_start, x_end, N)  # 1-D array of x-coordinates
y = numpy.linspace(y_start, y_end, N)  # 1-D array of y-coordinates

X, Y = numpy.meshgrid(x, y)

# Problem conditions
u_inf = 1
angle_of_attack = 0

# Load airfoil data and sources position
cwd = os.getcwd()  # Current running script dir
rel_files_dir = "/exercises/resources/"
x_source_array = numpy.loadtxt(cwd + rel_files_dir + "NACA0012_x.txt")
y_source_array = numpy.loadtxt(cwd + rel_files_dir + "NACA0012_y.txt")
source_strength_array = numpy.loadtxt(
    cwd + rel_files_dir + "NACA0012_sigma.txt")

# Get u,v and psi due to the freestream
u_freestream, v_freestream = get_freestream_velocity(
    u_inf, angle_of_attack)
psi_freestream = get_freestream_stream_function(
    u_inf, X, Y, angle_of_attack)

# Initialise u, v, psi total variables
u_source_total = 0
v_source_total = 0
psi_source_total = 0


for index in range(len(x_source_array) - 1):
    strength = source_strength_array[index]
    xs = x_source_array[index]
    ys = y_source_array[index]

    u, v = get_source_velocity(strength, xs, ys, X, Y)

    psi = get_source_stream_function(strength, xs, ys, X, Y)

    u_source_total += u
    v_source_total += v

    psi_source_total += psi


# Apply superposition and get total u, v and psi
u = u_source_total + u_freestream
v = v_source_total + v_freestream
psi = psi_freestream + psi_source_total

# Get Cp in the meshgrid
cp = 1 - (u**2 + v**2)/u_inf**2
cp_max_index = numpy.unravel_index(numpy.argmax(cp, axis=None), cp.shape)


def plot_streamlines():
    # Dimensions of the figure
    width = 10
    height = (y_end - y_start) / (x_end - x_start) * width
    pyplot.figure(figsize=(width, height))

    # Display grid
    pyplot.grid(True)

    # Definition of axis
    pyplot.xlabel('x', fontsize=16)
    pyplot.ylabel('y', fontsize=16)
    pyplot.xlim(x_start, x_end)
    pyplot.ylim(y_start, y_end)

    # Plot of streamlines with streamplot lib
    pyplot.streamplot(X, Y, u, v, density=1, linewidth=1,
                      arrowsize=1, arrowstyle='->')

    # Plot Airfoil
    pyplot.scatter(x_source_array, y_source_array,
                   color='#CD2305', s=10, marker=".")

    # Show Plot
    pyplot.show()


def plot_cp():
    # Dimensions of the figure
    width = 10
    height = (y_end - y_start) / (x_end - x_start) * width
    pyplot.figure(figsize=(width, height))

    # Display grid
    pyplot.grid(True)

    # Definition of axis
    pyplot.xlabel('x', fontsize=16)
    pyplot.ylabel('y', fontsize=16)
    pyplot.xlim(x_start, x_end)
    pyplot.ylim(y_start, y_end)

    # Plot Cp using the contourf lib
    contf = pyplot.contourf(
        X, Y, cp, levels=numpy.linspace(-2.0, 1.0, 100), extend='both')
    cbar = pyplot.colorbar(contf)
    cbar.set_label('$C_p$', fontsize=16)
    cbar.set_ticks([-2.0, -1.0, 0.0, 1.0])

    # Plot Airfoil
    pyplot.scatter(x_source_array, y_source_array,
                   color='#CD2305', s=10, marker=".")

    # Plot max Cp point
    pyplot.scatter(X[cp_max_index], Y[cp_max_index],
                   color='#ff00fb', s=50, marker=".")

    # Show Plot
    pyplot.show()


plot_streamlines()
plot_cp()
