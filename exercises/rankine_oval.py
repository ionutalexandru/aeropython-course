import math
import numpy
from matplotlib import pyplot


"""
PROBLEM DEFINITION: RANKINE OVAL

Horizontal freestream velocity with 0 angle of attack and a source/sink 
"""


def get_source_velocity(strength, xs, ys, X, Y):
    """
    Returns the velocity field generated by a source/sink

    Parameters:
        strength: float
            Strength of the source/sinl
        xs: float
            x-coordinate of the source or sink
        ys: float
            y-coordinate of the source or sink
        X: 2D Numpy array of floats
            x-coordinate of the mesh points
        Y: 2D Numpy array of floats
            y-coordinate of the mesh points

    Returns:
        u: 2D Numpy array of floats
            x-component of the velocity vector field
        v: 2D Numpy array of floats
            y-component of the velocity vector field
    """

    u = strength / (2 * math.pi) * (X - xs) / ((X - xs)**2 + (Y - ys)**2)
    v = strength / (2 * math.pi) * (Y - ys) / ((X - xs)**2 + (Y - ys)**2)

    return u, v


def get_freestream_velocity(v_freestream, angle_of_attack):
    """
    Returns the velocity field due to the freestream

    Parameters:
        v_freestream: float
            Absolute freestrean velocity
        angle_of_attack: float
            Angle of attack in rad

    Returns:
        u: float
            x-component of the velocity vector field
        v: float
            y-component of the velocity vector field
    """

    u = v_freestream * numpy.cos(angle_of_attack)
    v = v_freestream * numpy.sin(angle_of_attack)

    return u, v


def get_source_stream_function(strength, xs, ys, X, Y):
    """
    Returns the stream-function due to a source/sink

    Parameters:
        strength: float
            Strength of the source/sink
        xs: float
            x-coordinate of the source or sink
        ys: float
            y-coordinate of the source or sink
        X: 2D Numpy array of floats
            x-coordinate of the mesh points
        Y: 2D Numpy array of floats
            y-coordinate of the mesh points

    Returns:
        psi: 2D Numpy array of floats
            The strem-function
    """

    psi = strength / (2 * math.pi) * numpy.arctan2((Y - ys), (X - xs))

    return psi


def get_freestream_stream_function(v_freestream, X, Y, angle_of_attack):
    """
    Returns the stream-function due to a freestream

    Parameters:
        v_freestream: float
            Absolute freestrean velocity
        angle_of_attack: float
            Angle of attack in rad
        X: 2D Numpy array of floats
            x-coordinate of the mesh points
        Y: 2D Numpy array of floats
            y-coordinate of the mesh points

    Returns:
        psi: 2D Numpy array of floats
            The strem-function
    """

    psi = v_freestream * (Y * numpy.cos(angle_of_attack) -
                          X * numpy.sin(angle_of_attack))

    return psi


def compute_velocity_field(source_strength, sink_strength, x_source, y_source, x_sink, y_sink, v_freestream, angle_of_attack, X, Y):
    """
    Return the velocity field due to a freestream and source/sink

    Parameters:
        source_strength: float
            Strength of the source
        sink_strength: float
            Strength of the sink
        x_source: float
            x-coordinate of the source
        y_source: float
            y-coordinate of the source
        x_sink: float
            x-coordinate of the sink
        y_sink: float
            y-coordinate of the sink
        v_freestream: float
            Absolute freestrean velocity
        angle_of_attack: float
            Angle of attack in rad
        X: 2D Numpy array of floats
            x-coordinate of the mesh points
        Y: 2D Numpy array of floats
            y-coordinate of the mesh points

    Returns:
        u: float
            x-component of the velocity vector field
        v: float
            y-component of the velocity vector field
    """

    u_source, v_source = get_source_velocity(
        source_strength, x_source, y_source, X, Y)
    u_sink, v_sink = get_source_velocity(sink_strength, x_sink, y_sink, X, Y)
    u_freestream, v_freestream = get_freestream_velocity(
        v_freestream, angle_of_attack)

    # Apply superposition
    u = u_source + u_sink + u_freestream
    v = v_source + v_sink + v_freestream

    return u, v


def compute_stream_function(source_strength, sink_strength, x_source, y_source, x_sink, y_sink, v_freestream, angle_of_attack, X, Y):
    """
    Return the stream function due to a freestream and source/sink


    Parameters:
        source_strength: float
            Strength of the source
        sink_strength: float
            Strength of the sink
        x_source: float
            x-coordinate of the source
        y_source: float
            y-coordinate of the source
        x_sink: float
            x-coordinate of the sink
        y_sink: float
            y-coordinate of the sink
        v_freestream: float
            Absolute freestrean velocity
        angle_of_attack: float
            Angle of attack in rad
        X: 2D Numpy array of floats
            x-coordinate of the mesh points
        Y: 2D Numpy array of floats
            y-coordinate of the mesh points

    Returns:
        psi: 2D Numpy array of floats
            The strem-function
    """

    psi_source = get_source_stream_function(
        source_strength, x_source, y_source, X, Y)
    psi_sink = get_source_stream_function(sink_strength, x_sink, y_sink, X, Y)
    psi_freestream = get_freestream_stream_function(
        v_freestream, X, Y, angle_of_attack)

    psi = psi_source + psi_sink + psi_freestream

    return psi


"""MESH DEFINITION"""
N = 300  # Number of points in each direction
x_start, x_end = -4, 4  # Boundaries in x-direction
y_start, y_end = -2, 2  # Boundaries in y-direction
x = numpy.linspace(x_start, x_end, N)  # 1-D array of x-coordinates
y = numpy.linspace(y_start, y_end, N)  # 1-D array of y-coordinates

X, Y = numpy.meshgrid(x, y)

# Problem conditions
v_freestream = 1
angle_of_attack = 0
source_strength = 5
sink_strength = - source_strength
x_source, y_source = -1, 0
x_sink, y_sink = 1, 0


# Computations
u, v = compute_velocity_field(
    source_strength, sink_strength, x_source, y_source, x_sink, y_sink, v_freestream, angle_of_attack, X, Y)
psi = compute_stream_function(
    source_strength, sink_strength, x_source, y_source, x_sink, y_sink, v_freestream, angle_of_attack, X, Y)


def plot_streamlines():
    # Dimensions of the figure
    width = 10
    height = (y_end - y_start) / (x_end - x_start) * width
    pyplot.figure(figsize=(width, height))

    # Display grid
    pyplot.grid(True)

    # Definition of axis
    pyplot.xlabel('x', fontsize=16)
    pyplot.ylabel('y', fontsize=16)
    pyplot.xlim(x_start, x_end)
    pyplot.ylim(y_start, y_end)

    # Plot of streamlines with streamplot lib
    pyplot.streamplot(X, Y, u, v, density=2, linewidth=1,
                      arrowsize=1, arrowstyle='->')

    # Plot of source/sink position
    pyplot.scatter(x_source, y_source, color='#CD2305', s=80, marker='o')
    pyplot.scatter(x_sink, y_sink, color='#CD2305', s=80, marker='o')

    # Dividing Streamline is the one whose value is 0
    pyplot.contour(X, Y, psi, levels=0, colors='#CD2305',
                   linewidths=2, linestyles='solid')

    pyplot.show()


plot_streamlines()
